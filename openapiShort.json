{
  "openapi": "3.0.0",
  "info": {
    "title": "OpenAI API",
    "description": "The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.",
    "version": "2.0.0",
    "termsOfService": "https://openai.com/policies/terms-of-use",
    "contact": {
      "name": "OpenAI Support",
      "url": "https://help.openai.com/"
    },
    "license": {
      "name": "MIT",
      "url": "https://github.com/openai/openai-openapi/blob/master/LICENSE"
    }
  },
  "servers": [
    {
      "url": "https://api.openai.com/v1"
    }
  ],
  "tags": [
    {
      "name": "Chat",
      "description": "Given a list of messages comprising a conversation, the model will return a response."
    }
  ],
  "paths": {
    "/chat/completions": {
      "post": {
        "operationId": "createChatCompletion",
        "tags": [
          "Chat"
        ],
        "summary": "Creates a model response for the given chat conversation.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateChatCompletionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateChatCompletionResponse"
                }
              }
            }
          }
        },
        "x-oaiMeta": {
          "name": "Create chat completion",
          "group": "chat",
          "returns": "Returns a [chat completion](/docs/api-reference/chat/object) object, or a streamed sequence of [chat completion chunk](/docs/api-reference/chat/streaming) objects if the request is streamed.\n",
          "path": "create",
          "examples": [
            {
              "title": "Default",
              "request": {
                "curl": "curl https://api.openai.com/v1/chat/completions \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -d '{\n    \"model\": \"VAR_model_id\",\n    \"messages\": [\n      {\n        \"role\": \"system\",\n        \"content\": \"You are a helpful assistant.\"\n      },\n      {\n        \"role\": \"user\",\n        \"content\": \"Hello!\"\n      }\n    ]\n  }'\n",
                "python": "from openai import OpenAI\nclient = OpenAI()\n\ncompletion = client.chat.completions.create(\n  model=\"VAR_model_id\",\n  messages=[\n    {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n    {\"role\": \"user\", \"content\": \"Hello!\"}\n  ]\n)\n\nprint(completion.choices[0].message)\n",
                "node.js": "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const completion = await openai.chat.completions.create({\n    messages: [{ role: \"system\", content: \"You are a helpful assistant.\" }],\n    model: \"VAR_model_id\",\n  });\n\n  console.log(completion.choices[0]);\n}\n\nmain();"
              },
              "response": "{\n  \"id\": \"chatcmpl-123\",\n  \"object\": \"chat.completion\",\n  \"created\": 1677652288,\n  \"model\": \"gpt-3.5-turbo-0613\",\n  \"system_fingerprint\": \"fp_44709d6fcb\",\n  \"choices\": [{\n    \"index\": 0,\n    \"message\": {\n      \"role\": \"assistant\",\n      \"content\": \"\\n\\nHello there, how may I assist you today?\",\n    },\n    \"finish_reason\": \"stop\"\n  }],\n  \"usage\": {\n    \"prompt_tokens\": 9,\n    \"completion_tokens\": 12,\n    \"total_tokens\": 21\n  }\n}\n"
            },
            {
              "title": "Image input",
              "request": {
                "curl": "curl https://api.openai.com/v1/chat/completions \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -d '{\n    \"model\": \"gpt-4-vision-preview\",\n    \"messages\": [\n      {\n        \"role\": \"user\",\n        \"content\": [\n          {\n            \"type\": \"text\",\n            \"text\": \"What’s in this image?\"\n          },\n          {\n            \"type\": \"image_url\",\n            \"image_url\": {\n              \"url\": \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg\"\n            }\n          }\n        ]\n      }\n    ],\n    \"max_tokens\": 300\n  }'\n",
                "python": "from openai import OpenAI\n\nclient = OpenAI()\n\nresponse = client.chat.completions.create(\n    model=\"gpt-4-vision-preview\",\n    messages=[\n        {\n            \"role\": \"user\",\n            \"content\": [\n                {\"type\": \"text\", \"text\": \"What’s in this image?\"},\n                {\n                    \"type\": \"image_url\",\n                    \"image_url\": \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg\",\n                },\n            ],\n        }\n    ],\n    max_tokens=300,\n)\n\nprint(response.choices[0])\n",
                "node.js": "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const response = await openai.chat.completions.create({\n    model: \"gpt-4-vision-preview\",\n    messages: [\n      {\n        role: \"user\",\n        content: [\n          { type: \"text\", text: \"What’s in this image?\" },\n          {\n            type: \"image_url\",\n            image_url:\n              \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg\",\n          },\n        ],\n      },\n    ],\n  });\n  console.log(response.choices[0]);\n}\nmain();"
              },
              "response": "{\n  \"id\": \"chatcmpl-123\",\n  \"object\": \"chat.completion\",\n  \"created\": 1677652288,\n  \"model\": \"gpt-3.5-turbo-0613\",\n  \"system_fingerprint\": \"fp_44709d6fcb\",\n  \"choices\": [{\n    \"index\": 0,\n    \"message\": {\n      \"role\": \"assistant\",\n      \"content\": \"\\n\\nHello there, how may I assist you today?\",\n    },\n    \"finish_reason\": \"stop\"\n  }],\n  \"usage\": {\n    \"prompt_tokens\": 9,\n    \"completion_tokens\": 12,\n    \"total_tokens\": 21\n  }\n}\n"
            },
            {
              "title": "Streaming",
              "request": {
                "curl": "curl https://api.openai.com/v1/chat/completions \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -d '{\n    \"model\": \"VAR_model_id\",\n    \"messages\": [\n      {\n        \"role\": \"system\",\n        \"content\": \"You are a helpful assistant.\"\n      },\n      {\n        \"role\": \"user\",\n        \"content\": \"Hello!\"\n      }\n    ],\n    \"stream\": true\n  }'\n",
                "python": "from openai import OpenAI\nclient = OpenAI()\n\ncompletion = client.chat.completions.create(\n  model=\"VAR_model_id\",\n  messages=[\n    {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n    {\"role\": \"user\", \"content\": \"Hello!\"}\n  ],\n  stream=True\n)\n\nfor chunk in completion:\n  print(chunk.choices[0].delta)\n",
                "node.js": "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const completion = await openai.chat.completions.create({\n    model: \"VAR_model_id\",\n    messages: [\n      {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n      {\"role\": \"user\", \"content\": \"Hello!\"}\n    ],\n    stream: true,\n  });\n\n  for await (const chunk of completion) {\n    console.log(chunk.choices[0].delta.content);\n  }\n}\n\nmain();"
              },
              "response": "{\"id\":\"chatcmpl-123\",\"object\":\"chat.completion.chunk\",\"created\":1694268190,\"model\":\"gpt-3.5-turbo-0613\", \"system_fingerprint\": \"fp_44709d6fcb\", \"choices\":[{\"index\":0,\"delta\":{\"role\":\"assistant\",\"content\":\"\"},\"finish_reason\":null}]}\n\n{\"id\":\"chatcmpl-123\",\"object\":\"chat.completion.chunk\",\"created\":1694268190,\"model\":\"gpt-3.5-turbo-0613\", \"system_fingerprint\": \"fp_44709d6fcb\", \"choices\":[{\"index\":0,\"delta\":{\"content\":\"Hello\"},\"finish_reason\":null}]}\n\n{\"id\":\"chatcmpl-123\",\"object\":\"chat.completion.chunk\",\"created\":1694268190,\"model\":\"gpt-3.5-turbo-0613\", \"system_fingerprint\": \"fp_44709d6fcb\", \"choices\":[{\"index\":0,\"delta\":{\"content\":\"!\"},\"finish_reason\":null}]}\n\n....\n\n{\"id\":\"chatcmpl-123\",\"object\":\"chat.completion.chunk\",\"created\":1694268190,\"model\":\"gpt-3.5-turbo-0613\", \"system_fingerprint\": \"fp_44709d6fcb\", \"choices\":[{\"index\":0,\"delta\":{\"content\":\" today\"},\"finish_reason\":null}]}\n\n{\"id\":\"chatcmpl-123\",\"object\":\"chat.completion.chunk\",\"created\":1694268190,\"model\":\"gpt-3.5-turbo-0613\", \"system_fingerprint\": \"fp_44709d6fcb\", \"choices\":[{\"index\":0,\"delta\":{\"content\":\"?\"},\"finish_reason\":null}]}\n\n{\"id\":\"chatcmpl-123\",\"object\":\"chat.completion.chunk\",\"created\":1694268190,\"model\":\"gpt-3.5-turbo-0613\", \"system_fingerprint\": \"fp_44709d6fcb\", \"choices\":[{\"index\":0,\"delta\":{},\"finish_reason\":\"stop\"}]}\n"
            },
            {
              "title": "Function calling",
              "request": {
                "curl": "curl https://api.openai.com/v1/chat/completions \\\n-H \"Content-Type: application/json\" \\\n-H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n-d '{\n  \"model\": \"gpt-3.5-turbo\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"What is the weather like in Boston?\"\n    }\n  ],\n  \"functions\": [\n    {\n      \"name\": \"get_current_weather\",\n      \"description\": \"Get the current weather in a given location\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"location\": {\n            \"type\": \"string\",\n            \"description\": \"The city and state, e.g. San Francisco, CA\"\n          },\n          \"unit\": {\n            \"type\": \"string\",\n            \"enum\": [\"celsius\", \"fahrenheit\"]\n          }\n        },\n        \"required\": [\"location\"]\n      }\n    }\n  ],\n  \"function_call\": \"auto\"\n}'\n",
                "python": "from openai import OpenAI\nclient = OpenAI()\n\nfunctions = [\n  {\n    \"name\": \"get_current_weather\",\n    \"description\": \"Get the current weather in a given location\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"location\": {\n                \"type\": \"string\",\n                \"description\": \"The city and state, e.g. San Francisco, CA\",\n            },\n            \"unit\": {\"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\"]},\n        },\n        \"required\": [\"location\"],\n    },\n  }\n]\nmessages = [{\"role\": \"user\", \"content\": \"What's the weather like in Boston today?\"}]\ncompletion = client.chat.completions.create(\n  model=\"VAR_model_id\",\n  messages=messages,\n  functions=functions,\n  function_call=\"auto\"\n)\n\nprint(completion)\n",
                "node.js": "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const messages = [{\"role\": \"user\", \"content\": \"What's the weather like in Boston today?\"}];\n  const functions = [\n      {\n          \"name\": \"get_current_weather\",\n          \"description\": \"Get the current weather in a given location\",\n          \"parameters\": {\n              \"type\": \"object\",\n              \"properties\": {\n                  \"location\": {\n                      \"type\": \"string\",\n                      \"description\": \"The city and state, e.g. San Francisco, CA\",\n                  },\n                  \"unit\": {\"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\"]},\n              },\n              \"required\": [\"location\"],\n          },\n      }\n  ];\n\n  const response = await openai.chat.completions.create({\n      model: \"gpt-3.5-turbo\",\n      messages: messages,\n      functions: functions,\n      function_call: \"auto\",  // auto is default, but we'll be explicit\n  });\n\n  console.log(response);\n}\n\nmain();"
              },
              "response": "{\n  \"choices\": [\n    {\n      \"finish_reason\": \"function_call\",\n      \"index\": 0,\n      \"message\": {\n        \"content\": null,\n        \"function_call\": {\n          \"arguments\": \"{\\n  \\\"location\\\": \\\"Boston, MA\\\"\\n}\",\n          \"name\": \"get_current_weather\"\n        },\n        \"role\": \"assistant\"\n      }\n    }\n  ],\n  \"created\": 1694028367,\n  \"model\": \"gpt-3.5-turbo-0613\",\n  \"system_fingerprint\": \"fp_44709d6fcb\",\n  \"object\": \"chat.completion\",\n  \"usage\": {\n    \"completion_tokens\": 18,\n    \"prompt_tokens\": 82,\n    \"total_tokens\": 100\n  }\n}\n"
            }
          ]
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "ChatCompletionRequestMessageContentPart": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ChatCompletionRequestMessageContentPartText"
          },
          {
            "$ref": "#/components/schemas/ChatCompletionRequestMessageContentPartImage"
          }
        ],
        "x-oaiExpandable": true
      },
      "ChatCompletionRequestMessageContentPartImage": {
        "type": "object",
        "title": "Image content part",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "image_url"
            ],
            "description": "The type of the content part."
          },
          "image_url": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "description": "Either a URL of the image or the base64 encoded image data.",
                "format": "uri"
              },
              "detail": {
                "type": "string",
                "description": "Specifies the detail level of the image.",
                "enum": [
                  "auto",
                  "low",
                  "high"
                ],
                "default": "auto"
              }
            },
            "required": [
              "url"
            ]
          }
        },
        "required": [
          "type",
          "image_url"
        ]
      },
      "ChatCompletionRequestMessageContentPartText": {
        "type": "object",
        "title": "Text content part",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "text"
            ],
            "description": "The type of the content part."
          },
          "text": {
            "type": "string",
            "description": "The text content."
          }
        },
        "required": [
          "type",
          "text"
        ]
      },
      "ChatCompletionRequestMessage": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ChatCompletionRequestSystemMessage"
          },
          {
            "$ref": "#/components/schemas/ChatCompletionRequestUserMessage"
          },
          {
            "$ref": "#/components/schemas/ChatCompletionRequestAssistantMessage"
          },
          {
            "$ref": "#/components/schemas/ChatCompletionRequestToolMessage"
          },
          {
            "$ref": "#/components/schemas/ChatCompletionRequestFunctionMessage"
          }
        ],
        "x-oaiExpandable": true
      },
      "ChatCompletionRequestSystemMessage": {
        "type": "object",
        "title": "System message",
        "properties": {
          "content": {
            "nullable": true,
            "description": "The contents of the system message.",
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": [
              "system"
            ],
            "description": "The role of the messages author, in this case `system`."
          }
        },
        "required": [
          "content",
          "role"
        ]
      },
      "ChatCompletionRequestUserMessage": {
        "type": "object",
        "title": "User message",
        "properties": {
          "content": {
            "nullable": true,
            "description": "The contents of the user message.\n",
            "oneOf": [
              {
                "type": "string",
                "description": "The text contents of the message.",
                "title": "Text content"
              },
              {
                "type": "array",
                "description": "An array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts. Image input is only supported when using the `gpt-4-visual-preview` model.",
                "title": "Array of content parts",
                "items": {
                  "$ref": "#/components/schemas/ChatCompletionRequestMessageContentPart"
                },
                "minItems": 1
              }
            ]
          },
          "role": {
            "type": "string",
            "enum": [
              "user"
            ],
            "description": "The role of the messages author, in this case `user`."
          }
        },
        "required": [
          "content",
          "role"
        ]
      },
      "ChatCompletionRequestAssistantMessage": {
        "type": "object",
        "title": "Assistant message",
        "properties": {
          "content": {
            "nullable": true,
            "type": "string",
            "description": "The contents of the assistant message.\n"
          },
          "role": {
            "type": "string",
            "enum": [
              "assistant"
            ],
            "description": "The role of the messages author, in this case `assistant`."
          },
          "tool_calls": {
            "$ref": "#/components/schemas/ChatCompletionMessageToolCalls"
          },
          "function_call": {
            "type": "object",
            "deprecated": true,
            "description": "Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.",
            "properties": {
              "arguments": {
                "type": "string",
                "description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function."
              },
              "name": {
                "type": "string",
                "description": "The name of the function to call."
              }
            },
            "required": [
              "arguments",
              "name"
            ]
          }
        },
        "required": [
          "content",
          "role"
        ]
      },
      "ChatCompletionRequestToolMessage": {
        "type": "object",
        "title": "Tool message",
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "tool"
            ],
            "description": "The role of the messages author, in this case `tool`."
          },
          "content": {
            "nullable": true,
            "type": "string",
            "description": "The contents of the tool message."
          },
          "tool_call_id": {
            "type": "string",
            "description": "Tool call that this message is responding to."
          }
        },
        "required": [
          "role",
          "content",
          "tool_call_id"
        ]
      },
      "ChatCompletionRequestFunctionMessage": {
        "type": "object",
        "title": "Function message",
        "deprecated": true,
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "function"
            ],
            "description": "The role of the messages author, in this case `function`."
          },
          "content": {
            "type": "string",
            "nullable": true,
            "description": "The return value from the function call, to return to the model."
          },
          "name": {
            "type": "string",
            "description": "The name of the function to call."
          }
        },
        "required": [
          "role",
          "name",
          "content"
        ]
      },
      "FunctionParameters": {
        "type": "object",
        "description": "The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/gpt/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.\n\nTo describe a function that accepts no parameters, provide the value `{\"type\": \"object\", \"properties\": {}}`.",
        "additionalProperties": true
      },
      "ChatCompletionFunctions": {
        "type": "object",
        "deprecated": true,
        "properties": {
          "description": {
            "type": "string",
            "description": "A description of what the function does, used by the model to choose when and how to call the function."
          },
          "name": {
            "type": "string",
            "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."
          },
          "parameters": {
            "$ref": "#/components/schemas/FunctionParameters"
          }
        },
        "required": [
          "name",
          "parameters"
        ]
      },
      "ChatCompletionFunctionCallOption": {
        "type": "object",
        "description": "Specifying a particular function via `{\"name\": \"my_function\"}` forces the model to call that function.\n",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the function to call."
          }
        },
        "required": [
          "name"
        ]
      },
      "ChatCompletionTool": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "function"
            ],
            "description": "The type of the tool. Currently, only `function` is supported."
          },
          "function": {
            "$ref": "#/components/schemas/FunctionObject"
          }
        },
        "required": [
          "type",
          "function"
        ]
      },
      "FunctionObject": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A description of what the function does, used by the model to choose when and how to call the function."
          },
          "name": {
            "type": "string",
            "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."
          },
          "parameters": {
            "$ref": "#/components/schemas/FunctionParameters"
          }
        },
        "required": [
          "name",
          "parameters"
        ]
      },
      "ChatCompletionToolChoiceOption": {
        "description": "Controls which (if any) function is called by the model.\n`none` means the model will not call a function and instead generates a message.\n`auto` means the model can pick between generating a message or calling a function.\nSpecifying a particular function via `{\"type: \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to call that function.\n\n`none` is the default when no functions are present. `auto` is the default if functions are present.\n",
        "oneOf": [
          {
            "type": "string",
            "description": "`none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function.\n",
            "enum": [
              "none",
              "auto"
            ]
          },
          {
            "$ref": "#/components/schemas/ChatCompletionNamedToolChoice"
          }
        ],
        "x-oaiExpandable": true
      },
      "ChatCompletionNamedToolChoice": {
        "type": "object",
        "description": "Specifies a tool the model should use. Use to force the model to call a specific function.",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "function"
            ],
            "description": "The type of the tool. Currently, only `function` is supported."
          },
          "function": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the function to call."
              }
            },
            "required": [
              "name"
            ]
          }
        }
      },
      "ChatCompletionMessageToolCalls": {
        "type": "array",
        "description": "The tool calls generated by the model, such as function calls.",
        "items": {
          "$ref": "#/components/schemas/ChatCompletionMessageToolCall"
        }
      },
      "ChatCompletionMessageToolCall": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the tool call."
          },
          "type": {
            "type": "string",
            "enum": [
              "function"
            ],
            "description": "The type of the tool. Currently, only `function` is supported."
          },
          "function": {
            "type": "object",
            "description": "The function that the model called.",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the function to call."
              },
              "arguments": {
                "type": "string",
                "description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function."
              }
            },
            "required": [
              "name",
              "arguments"
            ]
          }
        },
        "required": [
          "id",
          "type",
          "function"
        ]
      },
      "ChatCompletionResponseMessage": {
        "type": "object",
        "description": "A chat completion message generated by the model.",
        "properties": {
          "content": {
            "type": "string",
            "description": "The contents of the message.",
            "nullable": true
          },
          "tool_calls": {
            "$ref": "#/components/schemas/ChatCompletionMessageToolCalls"
          },
          "role": {
            "type": "string",
            "enum": [
              "assistant"
            ],
            "description": "The role of the author of this message."
          },
          "function_call": {
            "type": "object",
            "deprecated": true,
            "description": "Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.",
            "properties": {
              "arguments": {
                "type": "string",
                "description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function."
              },
              "name": {
                "type": "string",
                "description": "The name of the function to call."
              }
            },
            "required": [
              "name",
              "arguments"
            ]
          }
        },
        "required": [
          "role",
          "content"
        ]
      },
      "CreateChatCompletionRequest": {
        "type": "object",
        "properties": {
          "messages": {
            "description": "A list of messages comprising the conversation so far. [Example Python code](https://cookbook.openai.com/examples/how_to_format_inputs_to_chatgpt_models).",
            "type": "array",
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/ChatCompletionRequestMessage"
            }
          },
          "model": {
            "description": "ID of the model to use. See the [model endpoint compatibility](/docs/models/model-endpoint-compatibility) table for details on which models work with the Chat API.",
            "example": "gpt-3.5-turbo",
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "enum": [
                  "gpt-4-1106-preview",
                  "gpt-4-vision-preview",
                  "gpt-4",
                  "gpt-4-0314",
                  "gpt-4-0613",
                  "gpt-4-32k",
                  "gpt-4-32k-0314",
                  "gpt-4-32k-0613",
                  "gpt-3.5-turbo-1106",
                  "gpt-3.5-turbo",
                  "gpt-3.5-turbo-16k",
                  "gpt-3.5-turbo-0301",
                  "gpt-3.5-turbo-0613",
                  "gpt-3.5-turbo-16k-0613"
                ]
              }
            ],
            "x-oaiTypeLabel": "string"
          },
          "frequency_penalty": {
            "type": "number",
            "default": 0,
            "minimum": -2,
            "maximum": 2,
            "nullable": true,
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.\n\n[See more information about frequency and presence penalties.](/docs/guides/gpt/parameter-details)\n"
          },
          "logit_bias": {
            "type": "object",
            "x-oaiTypeLabel": "map",
            "default": null,
            "nullable": true,
            "additionalProperties": {
              "type": "integer"
            },
            "description": "Modify the likelihood of specified tokens appearing in the completion.\n\nAccepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.\n"
          },
          "max_tokens": {
            "description": "The maximum number of [tokens](/tokenizer) to generate in the chat completion.\n\nThe total length of input tokens and generated tokens is limited by the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.\n",
            "default": "inf",
            "type": "integer",
            "nullable": true
          },
          "n": {
            "type": "integer",
            "minimum": 1,
            "maximum": 128,
            "default": 1,
            "example": 1,
            "nullable": true,
            "description": "How many chat completion choices to generate for each input message."
          },
          "presence_penalty": {
            "type": "number",
            "default": 0,
            "minimum": -2,
            "maximum": 2,
            "nullable": true,
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.\n\n[See more information about frequency and presence penalties.](/docs/guides/gpt/parameter-details)\n"
          },
          "response_format": {
            "type": "object",
            "description": "An object specifying the format that the model must output. \n\nSetting to `{ \"type\": \"json_object\" }` enables JSON mode, which guarantees the message the model generates is valid JSON.\n\n**Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in increased latency and appearance of a \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.\n",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "text",
                  "json_object"
                ],
                "example": "json_object",
                "default": "text",
                "description": "Must be one of `text` or `json_object`."
              }
            }
          },
          "seed": {
            "type": "integer",
            "minimum": -9223372036854776000,
            "maximum": 9223372036854776000,
            "nullable": true,
            "description": "This feature is in Beta. \nIf specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.\nDeterminism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.\n",
            "x-oaiMeta": {
              "beta": true
            }
          },
          "stop": {
            "description": "Up to 4 sequences where the API will stop generating further tokens.\n",
            "default": null,
            "oneOf": [
              {
                "type": "string",
                "nullable": true
              },
              {
                "type": "array",
                "minItems": 1,
                "maxItems": 4,
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "stream": {
            "description": "If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).\n",
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "temperature": {
            "type": "number",
            "minimum": 0,
            "maximum": 2,
            "default": 1,
            "example": 1,
            "nullable": true,
            "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n\nWe generally recommend altering this or `top_p` but not both.\n"
          },
          "top_p": {
            "type": "number",
            "minimum": 0,
            "maximum": 1,
            "default": 1,
            "example": 1,
            "nullable": true,
            "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or `temperature` but not both.\n"
          },
          "tools": {
            "type": "array",
            "description": "A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for.\n",
            "items": {
              "$ref": "#/components/schemas/ChatCompletionTool"
            }
          },
          "tool_choice": {
            "$ref": "#/components/schemas/ChatCompletionToolChoiceOption"
          },
          "user": {
            "type": "string",
            "example": "user-1234",
            "description": "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).\n"
          },
          "function_call": {
            "deprecated": true,
            "description": "Deprecated in favor of `tool_choice`.\n\nControls which (if any) function is called by the model.\n`none` means the model will not call a function and instead generates a message.\n`auto` means the model can pick between generating a message or calling a function.\nSpecifying a particular function via `{\"name\": \"my_function\"}` forces the model to call that function.\n\n`none` is the default when no functions are present. `auto`` is the default if functions are present.\n",
            "oneOf": [
              {
                "type": "string",
                "description": "`none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function.\n",
                "enum": [
                  "none",
                  "auto"
                ]
              },
              {
                "$ref": "#/components/schemas/ChatCompletionFunctionCallOption"
              }
            ],
            "x-oaiExpandable": true
          },
          "functions": {
            "deprecated": true,
            "description": "Deprecated in favor of `tools`.\n\nA list of functions the model may generate JSON inputs for.\n",
            "type": "array",
            "minItems": 1,
            "maxItems": 128,
            "items": {
              "$ref": "#/components/schemas/ChatCompletionFunctions"
            }
          }
        },
        "required": [
          "model",
          "messages"
        ]
      },
      "CreateChatCompletionResponse": {
        "type": "object",
        "description": "Represents a chat completion response returned by model, based on the provided input.",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier for the chat completion."
          },
          "choices": {
            "type": "array",
            "description": "A list of chat completion choices. Can be more than one if `n` is greater than 1.",
            "items": {
              "type": "object",
              "required": [
                "finish_reason",
                "index",
                "message"
              ],
              "properties": {
                "finish_reason": {
                  "type": "string",
                  "description": "The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,\n`length` if the maximum number of tokens specified in the request was reached,\n`content_filter` if content was omitted due to a flag from our content filters,\n`tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.\n",
                  "enum": [
                    "stop",
                    "length",
                    "tool_calls",
                    "content_filter",
                    "function_call"
                  ]
                },
                "index": {
                  "type": "integer",
                  "description": "The index of the choice in the list of choices."
                },
                "message": {
                  "$ref": "#/components/schemas/ChatCompletionResponseMessage"
                }
              }
            }
          },
          "created": {
            "type": "integer",
            "description": "The Unix timestamp (in seconds) of when the chat completion was created."
          },
          "model": {
            "type": "string",
            "description": "The model used for the chat completion."
          },
          "system_fingerprint": {
            "type": "string",
            "description": "This fingerprint represents the backend configuration that the model runs with.\n\nCan be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.\n"
          },
          "object": {
            "type": "string",
            "description": "The object type, which is always `chat.completion`.",
            "enum": [
              "chat.completion"
            ]
          },
          "usage": {
            "$ref": "#/components/schemas/CompletionUsage"
          }
        },
        "required": [
          "choices",
          "created",
          "id",
          "model",
          "object"
        ],
        "x-oaiMeta": {
          "name": "The chat completion object",
          "group": "chat",
          "example": "{\n  \"id\": \"chatcmpl-123\",\n  \"object\": \"chat.completion\",\n  \"created\": 1677652288,\n  \"model\": \"gpt-3.5-turbo-0613\",\n  \"system_fingerprint\": \"fp_44709d6fcb\",\n  \"choices\": [{\n    \"index\": 0,\n    \"message\": {\n      \"role\": \"assistant\",\n      \"content\": \"\\n\\nHello there, how may I assist you today?\",\n    },\n    \"finish_reason\": \"stop\"\n  }],\n  \"usage\": {\n    \"prompt_tokens\": 9,\n    \"completion_tokens\": 12,\n    \"total_tokens\": 21\n  }\n}\n"
        }
      },
      "CompletionUsage": {
        "type": "object",
        "description": "Usage statistics for the completion request.",
        "properties": {
          "completion_tokens": {
            "type": "integer",
            "description": "Number of tokens in the generated completion."
          },
          "prompt_tokens": {
            "type": "integer",
            "description": "Number of tokens in the prompt."
          },
          "total_tokens": {
            "type": "integer",
            "description": "Total number of tokens used in the request (prompt + completion)."
          }
        },
        "required": [
          "prompt_tokens",
          "completion_tokens",
          "total_tokens"
        ]
      }
    }
  },
  "security": [
    {
      "ApiKeyAuth": []
    }
  ],
  "x-oaiMeta": {
    "groups": [
      {
        "id": "audio",
        "title": "Audio",
        "description": "Learn how to turn audio into text or text into audio.\n\nRelated guide: [Speech to text](/docs/guides/speech-to-text)\n",
        "sections": [
          {
            "type": "endpoint",
            "key": "createSpeech",
            "path": "createSpeech"
          },
          {
            "type": "endpoint",
            "key": "createTranscription",
            "path": "createTranscription"
          },
          {
            "type": "endpoint",
            "key": "createTranslation",
            "path": "createTranslation"
          }
        ]
      },
      {
        "id": "chat",
        "title": "Chat",
        "description": "Given a list of messages comprising a conversation, the model will return a response.\n\nRelated guide: [Chat Completions](/docs/guides/gpt)\n",
        "sections": [
          {
            "type": "object",
            "key": "CreateChatCompletionResponse",
            "path": "object"
          },
          {
            "type": "object",
            "key": "CreateChatCompletionStreamResponse",
            "path": "streaming"
          },
          {
            "type": "endpoint",
            "key": "createChatCompletion",
            "path": "create"
          }
        ]
      },
      {
        "id": "completions",
        "title": "Completions",
        "legacy": true,
        "description": "Given a prompt, the model will return one or more predicted completions, and can also return the probabilities of alternative tokens at each position. We recommend most users use our Chat Completions API. [Learn more](/docs/deprecations/2023-07-06-gpt-and-embeddings)\n\nRelated guide: [Legacy Completions](/docs/guides/gpt/completions-api)\n",
        "sections": [
          {
            "type": "object",
            "key": "CreateCompletionResponse",
            "path": "object"
          },
          {
            "type": "endpoint",
            "key": "createCompletion",
            "path": "create"
          }
        ]
      },
      {
        "id": "embeddings",
        "title": "Embeddings",
        "description": "Get a vector representation of a given input that can be easily consumed by machine learning models and algorithms.\n\nRelated guide: [Embeddings](/docs/guides/embeddings)\n",
        "sections": [
          {
            "type": "object",
            "key": "Embedding",
            "path": "object"
          },
          {
            "type": "endpoint",
            "key": "createEmbedding",
            "path": "create"
          }
        ]
      },
      {
        "id": "fine-tuning",
        "title": "Fine-tuning",
        "description": "Manage fine-tuning jobs to tailor a model to your specific training data.\n\nRelated guide: [Fine-tune models](/docs/guides/fine-tuning)\n",
        "sections": [
          {
            "type": "object",
            "key": "FineTuningJob",
            "path": "object"
          },
          {
            "type": "endpoint",
            "key": "createFineTuningJob",
            "path": "create"
          },
          {
            "type": "endpoint",
            "key": "listPaginatedFineTuningJobs",
            "path": "list"
          },
          {
            "type": "endpoint",
            "key": "retrieveFineTuningJob",
            "path": "retrieve"
          },
          {
            "type": "endpoint",
            "key": "cancelFineTuningJob",
            "path": "cancel"
          },
          {
            "type": "object",
            "key": "FineTuningJobEvent",
            "path": "event-object"
          },
          {
            "type": "endpoint",
            "key": "listFineTuningEvents",
            "path": "list-events"
          }
        ]
      },
      {
        "id": "files",
        "title": "Files",
        "description": "Files are used to upload documents that can be used with features like [Assistants](/docs/api-reference/assistants) and [Fine-tuning](/docs/api-reference/fine-tuning).\n",
        "sections": [
          {
            "type": "object",
            "key": "OpenAIFile",
            "path": "object"
          },
          {
            "type": "endpoint",
            "key": "listFiles",
            "path": "list"
          },
          {
            "type": "endpoint",
            "key": "createFile",
            "path": "create"
          },
          {
            "type": "endpoint",
            "key": "deleteFile",
            "path": "delete"
          },
          {
            "type": "endpoint",
            "key": "retrieveFile",
            "path": "retrieve"
          },
          {
            "type": "endpoint",
            "key": "downloadFile",
            "path": "retrieve-contents"
          }
        ]
      },
      {
        "id": "images",
        "title": "Images",
        "description": "Given a prompt and/or an input image, the model will generate a new image.\n\nRelated guide: [Image generation](/docs/guides/images)\n",
        "sections": [
          {
            "type": "object",
            "key": "Image",
            "path": "object"
          },
          {
            "type": "endpoint",
            "key": "createImage",
            "path": "create"
          },
          {
            "type": "endpoint",
            "key": "createImageEdit",
            "path": "createEdit"
          },
          {
            "type": "endpoint",
            "key": "createImageVariation",
            "path": "createVariation"
          }
        ]
      },
      {
        "id": "models",
        "title": "Models",
        "description": "List and describe the various models available in the API. You can refer to the [Models](/docs/models) documentation to understand what models are available and the differences between them.\n",
        "sections": [
          {
            "type": "object",
            "key": "Model",
            "path": "object"
          },
          {
            "type": "endpoint",
            "key": "listModels",
            "path": "list"
          },
          {
            "type": "endpoint",
            "key": "retrieveModel",
            "path": "retrieve"
          },
          {
            "type": "endpoint",
            "key": "deleteModel",
            "path": "delete"
          }
        ]
      },
      {
        "id": "moderations",
        "title": "Moderations",
        "description": "Given a input text, outputs if the model classifies it as violating OpenAI's content policy.\n\nRelated guide: [Moderations](/docs/guides/moderation)\n",
        "sections": [
          {
            "type": "object",
            "key": "CreateModerationResponse",
            "path": "object"
          },
          {
            "type": "endpoint",
            "key": "createModeration",
            "path": "create"
          }
        ]
      },
      {
        "id": "assistants",
        "title": "Assistants",
        "beta": true,
        "description": "Build assistants that can call models and use tools to perform tasks.\n\n[Get started with the Assistants API](/docs/assistants)\n",
        "sections": [
          {
            "type": "object",
            "key": "AssistantObject",
            "path": "object"
          },
          {
            "type": "endpoint",
            "key": "createAssistant",
            "path": "createAssistant"
          },
          {
            "type": "endpoint",
            "key": "getAssistant",
            "path": "getAssistant"
          },
          {
            "type": "endpoint",
            "key": "modifyAssistant",
            "path": "modifyAssistant"
          },
          {
            "type": "endpoint",
            "key": "deleteAssistant",
            "path": "deleteAssistant"
          },
          {
            "type": "endpoint",
            "key": "listAssistants",
            "path": "listAssistants"
          },
          {
            "type": "object",
            "key": "AssistantFileObject",
            "path": "file-object"
          },
          {
            "type": "endpoint",
            "key": "createAssistantFile",
            "path": "createAssistantFile"
          },
          {
            "type": "endpoint",
            "key": "getAssistantFile",
            "path": "getAssistantFile"
          },
          {
            "type": "endpoint",
            "key": "deleteAssistantFile",
            "path": "deleteAssistantFile"
          },
          {
            "type": "endpoint",
            "key": "listAssistantFiles",
            "path": "listAssistantFiles"
          }
        ]
      },
      {
        "id": "threads",
        "title": "Threads",
        "beta": true,
        "description": "Create threads that assistants can interact with.\n\nRelated guide: [Assistants](/docs/assistants/overview)\n",
        "sections": [
          {
            "type": "object",
            "key": "ThreadObject",
            "path": "object"
          },
          {
            "type": "endpoint",
            "key": "createThread",
            "path": "createThread"
          },
          {
            "type": "endpoint",
            "key": "getThread",
            "path": "getThread"
          },
          {
            "type": "endpoint",
            "key": "modifyThread",
            "path": "modifyThread"
          },
          {
            "type": "endpoint",
            "key": "deleteThread",
            "path": "deleteThread"
          }
        ]
      },
      {
        "id": "messages",
        "title": "Messages",
        "beta": true,
        "description": "Create messages within threads\n\nRelated guide: [Assistants](/docs/assistants/overview)\n",
        "sections": [
          {
            "type": "object",
            "key": "MessageObject",
            "path": "object"
          },
          {
            "type": "endpoint",
            "key": "createMessage",
            "path": "createMessage"
          },
          {
            "type": "endpoint",
            "key": "getMessage",
            "path": "getMessage"
          },
          {
            "type": "endpoint",
            "key": "modifyMessage",
            "path": "modifyMessage"
          },
          {
            "type": "endpoint",
            "key": "listMessages",
            "path": "listMessages"
          },
          {
            "type": "object",
            "key": "MessageFileObject",
            "path": "file-object"
          },
          {
            "type": "endpoint",
            "key": "getMessageFile",
            "path": "getMessageFile"
          },
          {
            "type": "endpoint",
            "key": "listMessageFiles",
            "path": "listMessageFiles"
          }
        ]
      },
      {
        "id": "runs",
        "title": "Runs",
        "beta": true,
        "description": "Represents an execution run on a thread.\n\nRelated guide: [Assistants](/docs/assistants/overview)\n",
        "sections": [
          {
            "type": "object",
            "key": "RunObject",
            "path": "object"
          },
          {
            "type": "endpoint",
            "key": "createRun",
            "path": "createRun"
          },
          {
            "type": "endpoint",
            "key": "getRun",
            "path": "getRun"
          },
          {
            "type": "endpoint",
            "key": "modifyRun",
            "path": "modifyRun"
          },
          {
            "type": "endpoint",
            "key": "listRuns",
            "path": "listRuns"
          },
          {
            "type": "endpoint",
            "key": "submitToolOuputsToRun",
            "path": "submitToolOutputs"
          },
          {
            "type": "endpoint",
            "key": "cancelRun",
            "path": "cancelRun"
          },
          {
            "type": "endpoint",
            "key": "createThreadAndRun",
            "path": "createThreadAndRun"
          },
          {
            "type": "object",
            "key": "RunStepObject",
            "path": "step-object"
          },
          {
            "type": "endpoint",
            "key": "getRunStep",
            "path": "getRunStep"
          },
          {
            "type": "endpoint",
            "key": "listRunSteps",
            "path": "listRunSteps"
          }
        ]
      },
      {
        "id": "fine-tunes",
        "title": "Fine-tunes",
        "deprecated": true,
        "description": "Manage legacy fine-tuning jobs to tailor a model to your specific training data.\n\nWe recommend transitioning to the updating [fine-tuning API](/docs/guides/fine-tuning)\n",
        "sections": [
          {
            "type": "object",
            "key": "FineTune",
            "path": "object"
          },
          {
            "type": "endpoint",
            "key": "createFineTune",
            "path": "create"
          },
          {
            "type": "endpoint",
            "key": "listFineTunes",
            "path": "list"
          },
          {
            "type": "endpoint",
            "key": "retrieveFineTune",
            "path": "retrieve"
          },
          {
            "type": "endpoint",
            "key": "cancelFineTune",
            "path": "cancel"
          },
          {
            "type": "object",
            "key": "FineTuneEvent",
            "path": "event-object"
          },
          {
            "type": "endpoint",
            "key": "listFineTuneEvents",
            "path": "list-events"
          }
        ]
      },
      {
        "id": "edits",
        "title": "Edits",
        "deprecated": true,
        "description": "Given a prompt and an instruction, the model will return an edited version of the prompt.\n",
        "sections": [
          {
            "type": "object",
            "key": "CreateEditResponse",
            "path": "object"
          },
          {
            "type": "endpoint",
            "key": "createEdit",
            "path": "create"
          }
        ]
      }
    ]
  }
}